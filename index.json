[{"categories":["Development","How To"],"content":"Gettings all controls from a container v2 ","date":"2010-11-15","objectID":"/retrieve-all-controls-using-generics-ii/:1:0","tags":["csharp","net framework","generics","LINQ"],"title":"Retrieve all controls using generics (II)","uri":"/retrieve-all-controls-using-generics-ii/"},{"categories":["Development","How To"],"content":"A better approach In my previous post I created a recursive function to retrieve all controls inside a form and its containers. Today, my colleague and friend Eduard Tomàs sent me another solution to the same topic based on LINQ. It’s simply and really, really pretty ❤️ ","date":"2010-11-15","objectID":"/retrieve-all-controls-using-generics-ii/:1:1","tags":["csharp","net framework","generics","LINQ"],"title":"Retrieve all controls using generics (II)","uri":"/retrieve-all-controls-using-generics-ii/"},{"categories":["Development","How To"],"content":"The power of LINQ Before starting, we need to solve this: LINQ works over IEnumerable, but Control.Controls property returns a ControlCollection type. In fact, nowadays, since we have Generics this class has no sense (like other 1.000 similar classes) but remember that Generics doesn’t appeared until .NET Framework 2.0. So, our first step will be retrieve an IEnumerable from a ControlCollection property of a Control. This could be accomplished using an extensor method over the class ControlCollection: public static IEnumerable\u003cControl\u003e AsEnumerable(this Control.ControlCollection @this) { foreach (var control in @this) yield return (Control)control; } Note that using this method we are able to transform CollectionControl to IEnumerable and get full access to the power of Linq. Now, let’s create a method to retrieve all controls of a type: public static IEnumerable\u003cT\u003e GetAllControls\u003cT\u003e(this Control @this) where T : Control { return @this.Controls.AsEnumerable().Where( x =\u003e x.GetType() == typeof(T)).Select( y =\u003e (T)y).Union( @this.Controls.AsEnumerable().SelectMany( x =\u003e GetAllControls\u003cT\u003e(x)).Select(y =\u003e (T)y)); } It looks cool, isn’t it? No loops, no ifs… only pure LINQ power! :-) Note that converting Controls property into an Enumerable allow us to use all those IEnumerable LINQ methods like Select, Where, Union or SelectMany… in just a single line of code! This is amazing, this is functional programming style! ","date":"2010-11-15","objectID":"/retrieve-all-controls-using-generics-ii/:1:2","tags":["csharp","net framework","generics","LINQ"],"title":"Retrieve all controls using generics (II)","uri":"/retrieve-all-controls-using-generics-ii/"},{"categories":["Development","How To"],"content":"Applying several actions There’s also a small difference with my original solution. In the previous one I used an internal List to copy all controls references. The new one only iterates over the original collection. There’s no internal lists. Another difference present in LINQ solution is we are returning an IEnumerable, so we loose the ForEach method (because IEnumerable doesn’t implements this method). But building our own ForEach method is as trivial as: public static void ForEach\u003cT\u003e(this IEnumerable\u003cT\u003e @this, Action\u003cT\u003e action) { foreach (T t in @this) { action(t); } } Now, we’ve all the necessary ingredients to get all controls and do whatever we need :D this.GetAllControls\u003cTextBox\u003e().ForEach(p =\u003e p.Enabled = false); this.GetAllControls\u003cTextBox\u003e().ForEach(p =\u003e { p.BackColor = Color.LightGray; p.ForeColor = Color.Red; p.Text = \"hello\"; p.TextAlign = HorizontalAlignment.Center; }); HYEI, happy coding! :-) November 2010 ","date":"2010-11-15","objectID":"/retrieve-all-controls-using-generics-ii/:1:3","tags":["csharp","net framework","generics","LINQ"],"title":"Retrieve all controls using generics (II)","uri":"/retrieve-all-controls-using-generics-ii/"},{"categories":["Development","How To"],"content":"Gettings all controls from a container ","date":"2010-11-09","objectID":"/retrieve-all-controls-using-generics-i/:1:0","tags":["csharp","net framework","generics"],"title":"Retrieve all controls using generics (I)","uri":"/retrieve-all-controls-using-generics-i/"},{"categories":["Development","How To"],"content":"That’s the question How many times have you ever heard something similar? :) How to clear the content of all the textboxes in a form? The question may vary a littles bit but it’s always related to obtain all controls of a determined type (Button TextBox, etc) in a form or maybe in another type of container like a Panel or user control. ","date":"2010-11-09","objectID":"/retrieve-all-controls-using-generics-i/:1:1","tags":["csharp","net framework","generics"],"title":"Retrieve all controls using generics (I)","uri":"/retrieve-all-controls-using-generics-i/"},{"categories":["Development","How To"],"content":"Generics and Extension methods Using generics it’s really easy! Firstly let’s create an extensor method, that returns a collection of all the controls of a type in a Form or container. And then, we will use this collection to do an action over each returned item. The extensor method public static List\u003cT\u003e GetControls\u003cT\u003e(this Control container) where T : Control { List\u003cT\u003e controls = new List\u003cT\u003e(); foreach (Control c in container.Controls) { if (c is T) controls.Add((T)c); controls.AddRange(GetControls\u003cT\u003e(c)); } return controls; } This method retrieves the collection of Controls from a container calling it itself recursively, retrieving the content of all his containers. How to use it? this.GetControls\u003cTextBox\u003e().ForEach(p =\u003e p.Text = string.Empty); We can use the extensor method directly into a form because Form class inherits from ContainerControl, that inherits from ScrollableControl, and ScrollableControl from Control. Or, in other words, our Form will implement our extensor method. So, at compile time we should specify the type of the controls we want to retrieve. In the example we are using TextBox, but you can use Button type instead. And then, use ForEach to apply an action on each one of the items returned. Moreover, if we want to retrieve only the controls into a container (GroupBox, Panel, TabControl or another that inherits from Control), you can call the method for this particular control. myPanel.GetControls\u003cButton\u003e().ForEach(p =\u003e p.Enabled = false); Applying several actions In most cases, we would apply several actions to each control (not only one). In this case it’s quite easy: The only thing we have to do is create a method that receives a parameter of this type, and call it passing the control as an argument: this.GetControls\u003cTextBox\u003e().ForEach(p =\u003e ApplyFormat(p)); private void ApplyFormat(TextBox text) { text.BackColor = Color.LightGray; text.ForeColor = Color.Red; text.Text = \"hello\"; text.TextAlign = HorizontalAlignment.Center; } Or maybe, using an ‘action delegate’, both options are correct: this.GetControls\u003cTextBox\u003e().ForEach(p =\u003e { p.BackColor = Color.LightGray; p.ForeColor = Color.Red; p.Text = \"hello\"; p.TextAlign = HorizontalAlignment.Center; }); Happy coding! :-) November 2010 ","date":"2010-11-09","objectID":"/retrieve-all-controls-using-generics-i/:1:2","tags":["csharp","net framework","generics"],"title":"Retrieve all controls using generics (I)","uri":"/retrieve-all-controls-using-generics-i/"},{"categories":["Development","How To"],"content":"draft: true ","date":"2000-05-02","objectID":"/samples/:0:0","tags":null,"title":"Samples post","uri":"/samples/"},{"categories":["Development","How To"],"content":"Title 2 ","date":"2000-05-02","objectID":"/samples/:1:0","tags":null,"title":"Samples post","uri":"/samples/"},{"categories":["Development","How To"],"content":"Samples 99/100 Gone camping!  Be back soon. That is so funny! Hi, everyone! :) ","date":"2000-05-02","objectID":"/samples/:1:1","tags":null,"title":"Samples post","uri":"/samples/"},{"categories":["Development","How To"],"content":"Shortcodes Figure / image Lighthouse (figure) Gist Code \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e Instagram example: View this post on Instagram A post shared by Bjørn Erik Pedersen (@bepsays) on Jul 6, 2017 at 9:27am PDT Twitter example: Ramen hermano! pic.twitter.com/7LWz0aosPJ — Lluis Franco (@lluisfranco) April 3, 2020 Vimeo Youtube Eof f ","date":"2000-05-02","objectID":"/samples/:1:2","tags":null,"title":"Samples post","uri":"/samples/"}]